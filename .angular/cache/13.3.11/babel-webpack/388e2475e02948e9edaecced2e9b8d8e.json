{"ast":null,"code":"import { Animation, ChildProperty, Collection, Complex, Component, Event, EventHandler, KeyboardEvents, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, attributes, classList, closest, createElement, deleteObject, detach, extend, getInstance, getUniqueID, getValue, isBlazor, isNullOrUndefined, remove, removeClass, rippleEffect, select, setValue } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Popup, createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * @param props\n * @param model\n */\n\n\nfunction getModel(props, model) {\n  let obj = extend({}, props);\n\n  for (let prop of Object.keys(obj)) {\n    if (model.indexOf(prop) < 0) {\n      deleteObject(obj, prop);\n    }\n  }\n\n  return obj;\n}\n/** @hidden */\n\n\nfunction upDownKeyHandler(ul, keyCode) {\n  let defaultIdx = keyCode === 40 ? 0 : ul.childElementCount - 1;\n  let liIdx = defaultIdx;\n  let li;\n  let selectedLi = ul.querySelector('.e-selected');\n\n  if (selectedLi) {\n    selectedLi.classList.remove('e-selected');\n  }\n\n  for (let i = 0, len = ul.children.length; i < len; i++) {\n    if (ul.children[i].classList.contains('e-focused')) {\n      li = ul.children[i];\n      liIdx = i;\n      li.classList.remove('e-focused');\n      keyCode === 40 ? liIdx++ : liIdx--;\n\n      if (liIdx === (keyCode === 40 ? ul.childElementCount : -1)) {\n        liIdx = defaultIdx;\n      }\n    }\n  }\n\n  li = ul.children[liIdx];\n  liIdx = isValidLI(ul, li, liIdx, keyCode);\n\n  if (liIdx !== -1) {\n    addClass([ul.children[liIdx]], 'e-focused');\n    ul.children[liIdx].focus();\n  }\n}\n\nfunction isValidLI(ul, li, index, keyCode, count = 0) {\n  if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {\n    if (index === (keyCode === 40 ? ul.childElementCount - 1 : 0)) {\n      index = keyCode === 40 ? 0 : ul.childElementCount - 1;\n    } else {\n      keyCode === 40 ? index++ : index--;\n    }\n  }\n\n  li = ul.children[index];\n\n  if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {\n    count++;\n\n    if (count === ul.childElementCount) {\n      return index = -1;\n    }\n\n    index = isValidLI(ul, li, index, keyCode, count);\n  }\n\n  return index;\n}\n/** @hidden */\n\n\nfunction setBlankIconStyle(popup) {\n  let blankIconList = [].slice.call(popup.getElementsByClassName('e-blank-icon'));\n\n  if (!blankIconList.length) {\n    return;\n  }\n\n  let iconLi = popup.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');\n\n  if (iconLi.classList.contains('e-url')) {\n    iconLi = iconLi.querySelector('.e-menu-url');\n  }\n\n  let icon = iconLi.querySelector('.e-menu-icon');\n  let cssProp;\n  let enableRtl = popup.classList.contains('e-rtl');\n\n  if (enableRtl) {\n    cssProp = {\n      padding: 'paddingRight',\n      margin: 'marginLeft'\n    };\n  } else {\n    cssProp = {\n      padding: 'paddingLeft',\n      margin: 'marginRight'\n    };\n  } // tslint:disable\n\n\n  let size = `${parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10)}px`;\n  blankIconList.forEach(li => {\n    if (li.classList.contains('e-url')) {\n      li.querySelector('.e-menu-url').style[cssProp.padding] = size;\n    } else {\n      li.style[cssProp.padding] = size;\n    }\n  }); // tslint:enable\n}\n/**\n * Defines the items of Split Button/DropDownButton.\n */\n\n\nlet Item = /*#__PURE__*/(() => {\n  class Item extends ChildProperty {}\n\n  __decorate([Property('')], Item.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('')], Item.prototype, \"id\", void 0);\n\n  __decorate([Property(false)], Item.prototype, \"separator\", void 0);\n\n  __decorate([Property('')], Item.prototype, \"text\", void 0);\n\n  __decorate([Property('')], Item.prototype, \"url\", void 0);\n\n  __decorate([Property(false)], Item.prototype, \"disabled\", void 0);\n  /**\n   * Common modules\n   */\n\n\n  return Item;\n})();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst classNames = {\n  DISABLED: 'e-disabled',\n  FOCUS: 'e-focused',\n  ICON: 'e-menu-icon',\n  ITEM: 'e-item',\n  POPUP: 'e-dropdown-popup',\n  RTL: 'e-rtl',\n  SEPARATOR: 'e-separator',\n  VERTICAL: 'e-vertical'\n};\n/**\n * DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n * It can contain both text and images.\n * ```html\n * <button id=\"element\">DropDownButton</button>\n * ```\n * ```typescript\n * <script>\n * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);\n * dropDownButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\n\nlet DropDownButton = class DropDownButton extends Component {\n  /**\n   * Constructor for creating the widget\n   * @param  {DropDownButtonModel} options?\n   * @param  {string|HTMLButtonElement} element?\n   */\n  constructor(options, element) {\n    super(options, element);\n  }\n\n  preRender() {\n    /** */\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist([]);\n  }\n  /**\n   * To open/close DropDownButton popup based on current state of the DropDownButton.\n   * @returns void\n   */\n\n\n  toggle() {\n    this.canOpen() ? this.openPopUp() : this.closePopup();\n  }\n  /**\n   * Initialize the Component rendering\n   * @returns void\n   * @private\n   */\n\n\n  render() {\n    this.initialize();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  }\n  /**\n   * Adds a new item to the menu. By default, new item appends to the list as the last item,\n   * but you can insert based on the text parameter.\n   * @param  { ItemModel[] } items - Specifies an array of JSON data.\n   * @param { string } text - Specifies the text to insert the newly added item in the menu.\n   * @returns {void}.\n   */\n\n\n  addItems(items, text) {\n    let newItem;\n    let idx = this.items.length;\n\n    for (let j = 0, len = this.items.length; j < len; j++) {\n      if (text === this.items[j].text) {\n        idx = j;\n        break;\n      }\n    }\n\n    for (let i = items.length - 1; i >= 0; i--) {\n      // tslint:disable-next-line\n      newItem = new Item(this, 'items', items[i], true);\n      this.items.splice(idx, 0, newItem);\n    }\n\n    if (!this.canOpen()) {\n      this.createItems();\n    }\n  }\n  /**\n   * Removes the items from the menu.\n   * @param  { string[] } items - Specifies an array of string to remove the items.\n   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\n   * @returns {void}.\n   */\n\n\n  removeItems(items, isUniqueId) {\n    let refresh = false;\n\n    for (let i = 0, len = items.length; i < len; i++) {\n      for (let j = 0, len = this.items.length; j < len; j++) {\n        if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {\n          this.items.splice(j, 1);\n          refresh = true;\n          break;\n        }\n      }\n    }\n\n    if (refresh && this.getULElement()) {\n      this.createItems();\n    }\n  }\n\n  createPopup() {\n    let div = this.createElement('div', {\n      className: classNames.POPUP,\n      id: this.element.id + '-popup'\n    });\n    document.body.appendChild(div);\n    this.dropDown = new Popup(div, {\n      relateTo: this.element,\n      collision: {\n        X: 'fit',\n        Y: 'flip'\n      },\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      targetType: 'relative',\n      content: this.target ? this.getTargetElement() : '',\n      enableRtl: this.enableRtl\n    });\n\n    if (this.dropDown.element.style.position === 'fixed') {\n      this.dropDown.refreshPosition(this.element);\n    }\n\n    this.dropDown.hide();\n    attributes(this.element, {\n      ['aria-haspopup']: this.items.length || this.target ? 'true' : 'false',\n      ['aria-expanded']: 'false',\n      ['aria-owns']: this.getPopUpElement().id,\n      ['type']: 'button',\n      ['aria-label']: this.element.textContent + ' dropdownbutton'\n    });\n\n    if (this.cssClass) {\n      addClass([div], this.cssClass.split(' '));\n    }\n  }\n\n  getTargetElement() {\n    return typeof this.target === 'string' ? select(this.target) : this.target;\n  }\n\n  createItems(appendItems) {\n    let items = this.items;\n    let showIcon = this.hasIcon(this.items, 'iconCss');\n    let span;\n    let item;\n    let li;\n    let eventArgs;\n    let ul = this.getULElement();\n\n    if (ul) {\n      ul.innerHTML = '';\n    } else {\n      ul = this.createElement('ul', {\n        attrs: {\n          'role': 'menu',\n          'tabindex': '0'\n        }\n      });\n    }\n\n    for (let i = 0; i < items.length; i++) {\n      item = items[i];\n      let tempItem = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.text) : item.text;\n      li = this.createElement('li', {\n        innerHTML: item.url ? '' : tempItem,\n        className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,\n        attrs: {\n          'role': 'menuItem',\n          'tabindex': '-1'\n        },\n        id: item.id ? item.id : getUniqueID('e-' + this.getModuleName() + '-item')\n      });\n\n      if (item.url) {\n        li.appendChild(this.createAnchor(item));\n        li.classList.add('e-url');\n      }\n\n      if (item.iconCss) {\n        span = this.createElement('span', {\n          className: classNames.ICON + ' ' + item.iconCss\n        });\n        item.url ? li.childNodes[0].appendChild(span) : li.insertBefore(span, li.childNodes[0]);\n      } else {\n        if (showIcon && !item.separator) {\n          li.classList.add('e-blank-icon');\n        }\n      }\n\n      if (item.disabled) {\n        li.classList.add('e-disabled');\n      }\n\n      eventArgs = {\n        item: item,\n        element: li\n      };\n      this.trigger('beforeItemRender', eventArgs);\n      ul.appendChild(li);\n    }\n\n    if (appendItems) {\n      this.getPopUpElement().appendChild(ul);\n    }\n\n    if (showIcon) {\n      setBlankIconStyle(this.getPopUpElement());\n    }\n  }\n\n  hasIcon(items, field) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  createAnchor(item) {\n    let tempItem = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.text) : item.text;\n    return this.createElement('a', {\n      className: 'e-menu-text e-menu-url',\n      innerHTML: tempItem,\n      attrs: {\n        'href': item.url\n      }\n    });\n  }\n\n  initialize() {\n    this.button = new Button({\n      iconCss: this.iconCss,\n      iconPosition: this.iconPosition,\n      cssClass: this.cssClass,\n      content: this.content,\n      disabled: this.disabled,\n      enableRtl: this.enableRtl,\n      enablePersistence: this.enablePersistence\n    });\n    this.button.createElement = this.createElement;\n    this.button.appendTo(this.element);\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n\n    this.appendArrowSpan();\n    this.createPopup();\n    this.setActiveElem([this.element]);\n  }\n\n  appendArrowSpan() {\n    this.element.appendChild(this.createElement('span', {\n      className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'\n    }));\n  }\n\n  setActiveElem(elem) {\n    this.activeElem = elem;\n  }\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'dropdown-btn';\n  }\n\n  canOpen() {\n    return this.getPopUpElement().classList.contains('e-popup-close');\n  }\n  /**\n   * Destroys the widget.\n   * @returns void\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    if (this.getModuleName() === 'dropdown-btn') {\n      let attrList;\n      let classList$$1;\n\n      if (this.element.querySelector('span.e-caret')) {\n        detach(this.element.querySelector('span.e-caret'));\n      }\n\n      if (this.cssClass) {\n        classList$$1 = this.cssClass.split(' ');\n      }\n\n      this.button.destroy();\n\n      if (classList$$1) {\n        removeClass([this.element], classList$$1);\n      }\n\n      removeClass(this.activeElem, ['e-active']);\n      attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type'] : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];\n      attrList.forEach(key => {\n        this.element.removeAttribute(key);\n      });\n      this.dropDown.destroy();\n\n      if (this.getPopUpElement()) {\n        let popupEle = document.getElementById(this.getPopUpElement().id);\n\n        if (popupEle) {\n          removeClass([popupEle], ['e-popup-open', 'e-popup-close']);\n          detach(popupEle);\n        }\n      }\n\n      if (!this.disabled) {\n        this.unWireEvents();\n      }\n    }\n  }\n\n  getPopUpElement() {\n    return this.dropDown.element;\n  }\n\n  getULElement() {\n    return this.getPopUpElement().children[0];\n  }\n\n  wireEvents() {\n    let popupElement = this.getPopUpElement();\n    this.delegateMousedownHandler = this.mousedownHandler.bind(this);\n    EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    EventHandler.add(popupElement, 'click', this.clickHandler, this);\n    EventHandler.add(this.element, 'keydown', this.keyBoardHandler, this);\n    EventHandler.add(popupElement, 'keydown', this.keyBoardHandler, this);\n    this.rippleFn = rippleEffect(popupElement, {\n      selector: '.' + classNames.ITEM\n    });\n  }\n  /** @hidden */\n\n\n  keyBoardHandler(e) {\n    if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {\n      return;\n    }\n\n    switch (e.keyCode) {\n      case 38:\n      case 40:\n        if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {\n          this.keyEventHandler(e);\n        } else {\n          this.upDownKeyHandler(e);\n        }\n\n        break;\n\n      case 9:\n      case 13:\n      case 27:\n      case 32:\n        this.keyEventHandler(e);\n        break;\n    }\n  }\n\n  upDownKeyHandler(e) {\n    if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {\n      return;\n    }\n\n    e.preventDefault();\n    upDownKeyHandler(this.getULElement(), e.keyCode);\n  }\n\n  keyEventHandler(e) {\n    if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {\n      return;\n    }\n\n    if (e.keyCode !== 9) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {\n      if (!this.canOpen()) {\n        this.closePopup(e, this.element);\n      }\n    } else {\n      this.clickHandler(e);\n    }\n  }\n\n  getLI(elem) {\n    return elem.tagName === 'LI' ? elem : closest(elem, 'li');\n  }\n\n  mousedownHandler(e) {\n    let trgt = e.target;\n\n    if (!this.canOpen() && !(closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]') || closest(trgt, '[id=\"' + this.element.id + '\"]'))) {\n      this.closePopup(e);\n    }\n  }\n\n  clickHandler(e) {\n    let trgt = e.target;\n    let canOpen = this.canOpen();\n\n    if (closest(trgt, '[id=\"' + this.element.id + '\"]')) {\n      if (canOpen) {\n        this.openPopUp(e);\n      } else {\n        this.closePopup(e, this.activeElem[0]);\n      }\n    } else {\n      if (closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]')) {\n        let eventArgs;\n        let liIdx;\n        let item;\n        let li = this.getLI(trgt);\n\n        if (li) {\n          liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);\n          item = this.items[liIdx];\n\n          if (item) {\n            eventArgs = {\n              element: li,\n              item: item\n            };\n            this.trigger('select', eventArgs);\n          }\n\n          this.closePopup(e, this.activeElem[0]);\n        }\n      }\n    }\n  }\n\n  openPopUp(e = null) {\n    if (!this.target) {\n      this.createItems(true);\n    }\n\n    let ul = this.getULElement();\n    let beforeOpenArgs = {\n      element: ul,\n      items: this.items,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeOpen', beforeOpenArgs, observedArgs => {\n      if (!observedArgs.cancel) {\n        let ul = this.getULElement();\n        this.dropDown.show(null, this.element);\n        addClass([this.element], 'e-active');\n        this.element.setAttribute('aria-expanded', 'true');\n        ul.focus();\n        let openArgs = {\n          element: ul,\n          items: this.items\n        };\n        this.trigger('open', openArgs);\n      }\n    });\n  }\n\n  closePopup(e = null, focusEle) {\n    let ul = this.getULElement();\n    let beforeCloseArgs = {\n      element: ul,\n      items: this.items,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeClose', beforeCloseArgs, observedArgs => {\n      if (!observedArgs.cancel) {\n        let ul = this.getULElement();\n        let selectedLi = ul.querySelector('.e-selected');\n\n        if (selectedLi) {\n          selectedLi.classList.remove('e-selected');\n        }\n\n        this.dropDown.hide();\n        removeClass(this.activeElem, 'e-active');\n        this.element.setAttribute('aria-expanded', 'false');\n\n        if (focusEle) {\n          focusEle.focus();\n        }\n\n        let closeArgs = {\n          element: ul,\n          items: this.items\n        };\n        this.trigger('close', closeArgs);\n\n        if (!this.target && ul) {\n          detach(ul);\n        }\n      }\n    });\n  }\n\n  unWireEvents() {\n    EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n    EventHandler.remove(this.element, 'keydown', this.keyBoardHandler);\n    EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n    this.rippleFn();\n  }\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {DropDownButtonModel} newProp\n   * @param  {DropDownButtonModel} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    let btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];\n    this.button.setProperties(getModel(newProp, btnModel));\n    this.dropDown.setProperties(getModel(newProp, ['enableRtl']));\n    let popupElement = this.getPopUpElement();\n\n    for (let prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'content':\n          if (!this.element.querySelector('span.e-caret')) {\n            this.appendArrowSpan();\n          }\n\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.unWireEvents();\n\n            if (!this.canOpen()) {\n              this.closePopup();\n            }\n          } else {\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'cssClass':\n          if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {\n            let arrowSpan = this.element.querySelector('span.e-caret');\n            classList(arrowSpan, ['e-icon-bottom'], ['e-icon-right']);\n          }\n\n          if (oldProp.cssClass) {\n            removeClass([popupElement], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([popupElement], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'target':\n          this.dropDown.content = this.getTargetElement();\n          this.dropDown.dataBind();\n          break;\n\n        case 'items':\n          if (this.getULElement()) {\n            this.createItems();\n          }\n\n          break;\n      }\n    }\n  }\n  /**\n   * Sets the focus to DropDownButton\n   * its native method\n   * @public\n   */\n\n\n  focusIn() {\n    this.element.focus();\n  }\n\n};\n\n__decorate$1([Property('')], DropDownButton.prototype, \"content\", void 0);\n\n__decorate$1([Property('')], DropDownButton.prototype, \"cssClass\", void 0);\n\n__decorate$1([Property(false)], DropDownButton.prototype, \"disabled\", void 0);\n\n__decorate$1([Property('')], DropDownButton.prototype, \"iconCss\", void 0);\n\n__decorate$1([Property('Left')], DropDownButton.prototype, \"iconPosition\", void 0);\n\n__decorate$1([Property(false)], DropDownButton.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$1([Collection([], Item)], DropDownButton.prototype, \"items\", void 0);\n\n__decorate$1([Property('')], DropDownButton.prototype, \"target\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"beforeItemRender\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"beforeOpen\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"beforeClose\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"close\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"open\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"select\", void 0);\n\n__decorate$1([Event()], DropDownButton.prototype, \"created\", void 0);\n\nDropDownButton = __decorate$1([NotifyPropertyChanges], DropDownButton);\n/**\n * DropDownButton modules\n */\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../drop-down-button/drop-down-button-model.d.ts'/>\n\n\nconst RTL = 'e-rtl';\nconst TAGNAME = 'EJS-SPLITBUTTON';\n/**\n * SplitButton component has primary and secondary button. Primary button is used to select\n * default action and secondary button is used to toggle contextual overlays for displaying list of\n * action items. It can contain both text and images.\n * ```html\n * <button id=\"element\"></button>\n * ```\n * ```typescript\n * <script>\n * var splitBtnObj = new SplitButton({content: 'SplitButton'});\n * splitBtnObj.appendTo(\"#element\");\n * </script>\n * ```\n */\n\nlet SplitButton = class SplitButton extends DropDownButton {\n  /**\n   * Constructor for creating the widget\n   * @param  {SplitButtonModel} options?\n   * @param  {string|HTMLButtonElement} element?\n   */\n  constructor(options, element) {\n    super(options, element);\n  }\n  /**\n   * Initialize Angular support.\n   * @private\n   */\n\n\n  preRender() {\n    let ele = this.element;\n\n    if (ele.tagName === TAGNAME) {\n      let ejInstance = getValue('ej2_instances', ele);\n      let btn = this.createElement('button', {\n        attrs: {\n          'type': 'button'\n        }\n      });\n      let wrapper = this.createElement(TAGNAME, {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      for (let idx = 0, len = ele.attributes.length; idx < len; idx++) {\n        btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n      }\n\n      ele.parentNode.insertBefore(wrapper, ele);\n      detach(ele);\n      ele = btn;\n      wrapper.appendChild(ele);\n      setValue('ej2_instances', ejInstance, ele);\n      this.wrapper = wrapper;\n      this.element = ele;\n    }\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n  }\n  /**\n   * Initialize the Component rendering\n   * @returns void\n   * @private\n   */\n\n\n  render() {\n    this.initWrapper();\n    this.createPrimaryButton();\n    this.renderControl();\n  }\n\n  renderControl() {\n    this.createSecondaryButton();\n    this.setActiveElem([this.element, this.secondaryBtnObj.element]);\n    this.setAria();\n    this.wireEvents();\n    this.renderComplete();\n  }\n  /**\n   * Adds a new item to the menu. By default, new item appends to the list as the last item,\n   * but you can insert based on the text parameter.\n   * @param  { ItemModel[] } items - Specifies an array of JSON data.\n   * @param { string } text - Specifies the text to insert the newly added item in the menu.\n   * @returns {void}.\n   */\n\n\n  addItems(items, text) {\n    super.addItems(items, text);\n    this.secondaryBtnObj.items = this.items;\n  }\n  /**\n   * Removes the items from the menu.\n   * @param  { string[] } items - Specifies an array of string to remove the items.\n   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\n   * @returns {void}.\n   */\n\n\n  removeItems(items, isUniqueId) {\n    super.removeItems(items, isUniqueId);\n    this.secondaryBtnObj.items = this.items;\n  }\n\n  initWrapper() {\n    if (!this.wrapper) {\n      this.wrapper = this.createElement('div', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n      this.element.parentNode.insertBefore(this.wrapper, this.element);\n    }\n\n    this.element.classList.remove('e-' + this.getModuleName());\n\n    if (this.enableRtl) {\n      this.wrapper.classList.add(RTL);\n    }\n\n    if (this.cssClass) {\n      addClass([this.wrapper], this.cssClass.split(' '));\n    }\n  }\n\n  createPrimaryButton() {\n    let btnModel = {\n      cssClass: this.cssClass,\n      enableRtl: this.enableRtl,\n      iconCss: this.iconCss,\n      iconPosition: this.iconPosition,\n      content: this.content,\n      disabled: this.disabled\n    };\n    this.primaryBtnObj = new Button(btnModel);\n    this.primaryBtnObj.createElement = this.createElement;\n    this.primaryBtnObj.appendTo(this.element);\n    this.element.classList.add('e-' + this.getModuleName());\n    this.element.type = 'button';\n    this.wrapper.appendChild(this.element);\n  }\n\n  createSecondaryButton() {\n    let dropDownBtnModel;\n    let btnElem;\n    btnElem = this.createElement('button', {\n      className: 'e-icon-btn',\n      attrs: {\n        'tabindex': '-1'\n      },\n      id: this.element.id + '_dropdownbtn'\n    });\n    this.wrapper.appendChild(btnElem);\n    dropDownBtnModel = {\n      cssClass: this.cssClass,\n      disabled: this.disabled,\n      enableRtl: this.enableRtl,\n      items: this.items,\n      target: this.target\n    };\n\n    dropDownBtnModel.beforeItemRender = args => {\n      this.trigger('beforeItemRender', args);\n    };\n\n    dropDownBtnModel.open = args => {\n      this.trigger('open', args);\n    };\n\n    dropDownBtnModel.close = args => {\n      this.trigger('close', args);\n    };\n\n    dropDownBtnModel.select = args => {\n      this.trigger('select', args);\n    };\n\n    dropDownBtnModel.beforeOpen = args => {\n      let callBackPromise = new Deferred();\n      this.trigger('beforeOpen', args, observedArgs => {\n        callBackPromise.resolve(observedArgs);\n      });\n      return callBackPromise;\n    };\n\n    dropDownBtnModel.beforeClose = args => {\n      let callBackPromise = new Deferred();\n      this.trigger('beforeClose', args, observedArgs => {\n        callBackPromise.resolve(observedArgs);\n      });\n      return callBackPromise;\n    };\n\n    this.secondaryBtnObj = new DropDownButton(dropDownBtnModel);\n    this.secondaryBtnObj.createElement = this.createElement;\n    this.secondaryBtnObj.appendTo(btnElem);\n    this.secondaryBtnObj.dropDown.relateTo = this.wrapper;\n    this.dropDown = this.secondaryBtnObj.dropDown;\n    this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];\n    EventHandler.remove(this.getPopUpElement(), 'keydown', this.secondaryBtnObj.keyBoardHandler);\n    this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');\n  }\n\n  setAria() {\n    attributes(this.element, {\n      'aria-expanded': 'false',\n      'aria-haspopup': 'true',\n      'aria-label': this.element.textContent + ' splitbutton',\n      'aria-owns': this.secondaryBtnObj.dropDown.element.id\n    });\n  }\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'split-btn';\n  }\n  /**\n   * To open/close SplitButton popup based on current state of the SplitButton.\n   * @returns void\n   */\n\n\n  toggle() {\n    this.secondaryBtnObj.toggle();\n  }\n\n  destroy() {\n    let classList$$1 = [RTL];\n\n    if (this.cssClass) {\n      classList$$1 = classList$$1.concat(this.cssClass.split(' '));\n    }\n\n    if (this.element) {\n      let element = document.getElementById(this.element.id);\n\n      if (element && element.parentElement === this.wrapper) {\n        if (this.wrapper.tagName === TAGNAME) {\n          this.wrapper.innerHTML = '';\n          removeClass([this.wrapper], ['e-rtl', 'e-' + this.getModuleName() + '-wrapper']);\n          removeClass([this.wrapper], this.cssClass.split(' '));\n        } else {\n          removeClass([this.element], classList$$1);\n          ['aria-label', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type'].forEach(key => {\n            this.element.removeAttribute(key);\n          });\n          this.wrapper.parentNode.insertBefore(this.element, this.wrapper);\n          remove(this.wrapper);\n        }\n\n        this.unWireEvents();\n      }\n    }\n\n    this.primaryBtnObj.destroy();\n    this.secondaryBtnObj.destroy();\n    super.destroy();\n\n    if (!this.element.getAttribute('class')) {\n      this.element.removeAttribute('class');\n    }\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, 'click', this.primaryBtnClickHandler, this);\n    EventHandler.add(this.getPopUpElement(), 'keydown', this.keyBoardHandler, this);\n    new KeyboardEvents(this.element, {\n      keyAction: this.btnKeyBoardHandler.bind(this),\n      keyConfigs: {\n        altdownarrow: 'alt+downarrow'\n      }\n    });\n  }\n\n  unWireEvents() {\n    EventHandler.remove(this.element, 'click', this.primaryBtnClickHandler);\n    getInstance(this.element, KeyboardEvents).destroy();\n  }\n\n  primaryBtnClickHandler() {\n    this.trigger('click', {\n      element: this.element\n    });\n  }\n\n  btnKeyBoardHandler(e) {\n    switch (e.action) {\n      case 'altdownarrow':\n        this.clickHandler(e);\n        break;\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {SplitButtonModel} newProp\n   * @param  {SplitButtonModel} oldProp\n   * @returns void\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    let model = ['content', 'iconCss', 'iconPosition', 'cssClass', 'disabled', 'enableRtl'];\n    this.primaryBtnObj.setProperties(getModel(newProp, model));\n    model = ['beforeOpen', 'beforeItemRender', 'select', 'open', 'close', 'cssClass', 'disabled', 'enableRtl'];\n\n    if (Object.keys(newProp).indexOf('items') > -1) {\n      this.secondaryBtnObj.items = newProp.items;\n      this.secondaryBtnObj.dataBind();\n    }\n\n    this.secondaryBtnObj.setProperties(getModel(newProp, model));\n\n    for (let prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.wrapper], oldProp.cssClass.split(' '));\n          }\n\n          addClass([this.wrapper], newProp.cssClass.split(' '));\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            addClass([this.wrapper], RTL);\n          } else {\n            removeClass([this.wrapper], RTL);\n          }\n\n          break;\n      }\n    }\n  }\n  /**\n   * Sets the focus to SplitButton\n   * its native method\n   * @public\n   */\n\n\n  focusIn() {\n    this.element.focus();\n  }\n\n};\n\n__decorate$2([Property('')], SplitButton.prototype, \"content\", void 0);\n\n__decorate$2([Property('')], SplitButton.prototype, \"cssClass\", void 0);\n\n__decorate$2([Property(false)], SplitButton.prototype, \"disabled\", void 0);\n\n__decorate$2([Property('')], SplitButton.prototype, \"iconCss\", void 0);\n\n__decorate$2([Property('Left')], SplitButton.prototype, \"iconPosition\", void 0);\n\n__decorate$2([Collection([], Item)], SplitButton.prototype, \"items\", void 0);\n\n__decorate$2([Property('')], SplitButton.prototype, \"target\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"beforeItemRender\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"beforeOpen\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"beforeClose\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"click\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"close\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"open\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"select\", void 0);\n\n__decorate$2([Event()], SplitButton.prototype, \"created\", void 0);\n\nSplitButton = __decorate$2([NotifyPropertyChanges], SplitButton);\n/**\n * Deferred is used to handle asynchronous operation.\n */\n\nclass Deferred {\n  constructor() {\n    /**\n     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    /**\n     * Defines the callback function triggers when the Deferred object is rejected.\n     */\n\n    this.catch = this.promise.catch.bind(this.promise);\n    /**\n     * Defines the callback function triggers when the Deferred object is resolved.\n     */\n\n    this.then = this.promise.then.bind(this.promise);\n  }\n\n}\n/**\n * Split Button modules\n */\n\n/**\n * Initialize ButtonGroup CSS component with specified properties.\n * ```html\n * <div id='buttongroup'>\n * <button></button>\n * <button></button>\n * <button></button>\n * </div>\n * ```\n * ```typescript\n * createButtonGroup('#buttongroup', {\n *   cssClass: 'e-outline',\n *   buttons: [\n *       { content: 'Day' },\n *       { content: 'Week' },\n *       { content: 'Work Week'}\n *   ]\n * });\n * ```\n * @param {string} selector\n * @param {CreateButtonGroupModel} options\n * @returns HTMLElement\n */\n\n\nfunction createButtonGroup(selector, options = {}, createElement$$1) {\n  let child;\n  let btnElem;\n  let nextChild;\n  let btnModel;\n\n  if (isNullOrUndefined(createElement$$1)) {\n    createElement$$1 = createElement;\n  }\n\n  let wrapper = document.querySelector(selector);\n  addClass([wrapper], ['e-btn-group', 'e-css']);\n  wrapper.setAttribute('role', 'group');\n  let childs = wrapper.children;\n  options.buttons = options.buttons || [];\n\n  for (let i = 0, j = 0; j < childs.length; i++, j++) {\n    child = childs[j];\n    btnModel = options.buttons[i];\n\n    if (btnModel !== null) {\n      if (child.tagName === 'BUTTON') {\n        btnElem = child;\n      } else {\n        btnElem = createElement$$1('label');\n        nextChild = childs[j + 1];\n\n        if (nextChild) {\n          wrapper.insertBefore(btnElem, nextChild);\n        } else {\n          wrapper.appendChild(btnElem);\n        }\n\n        if (child.id) {\n          btnElem.setAttribute('for', child.id);\n        }\n\n        if (btnModel && btnModel.disabled) {\n          child.disabled = true;\n        }\n\n        j++;\n      }\n\n      if (options.cssClass && btnModel && !btnModel.cssClass) {\n        btnModel.cssClass = options.cssClass;\n      }\n\n      new Button(btnModel || {}, btnElem);\n    }\n  }\n\n  return wrapper;\n}\n/**\n * ButtonGroup modules\n */\n\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst HIDESPINNER = 'e-hide-spinner';\nconst PROGRESS = 'e-progress';\nconst PROGRESSACTIVE = 'e-progress-active';\nconst CONTENTCLS = 'e-btn-content';\n/**\n * Defines the spin settings.\n */\n\nclass SpinSettings extends ChildProperty {}\n\n__decorate$3([Property(null)], SpinSettings.prototype, \"template\", void 0);\n\n__decorate$3([Property(16)], SpinSettings.prototype, \"width\", void 0);\n\n__decorate$3([Property('Left')], SpinSettings.prototype, \"position\", void 0);\n/**\n * Defines the animation settings.\n */\n\n\nclass AnimationSettings extends ChildProperty {}\n\n__decorate$3([Property(400)], AnimationSettings.prototype, \"duration\", void 0);\n\n__decorate$3([Property('None')], AnimationSettings.prototype, \"effect\", void 0);\n\n__decorate$3([Property('ease')], AnimationSettings.prototype, \"easing\", void 0);\n/**\n * The ProgressButton visualizes the progression of an operation to indicate the user\n * that a process is happening in the background with visual representation.\n * ```html\n * <button id=\"element\"></button>\n * ```\n * ```typescript\n * <script>\n * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });\n * progressButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\n\n\nlet ProgressButton = class ProgressButton extends Button {\n  /**\n   * Constructor for creating the widget\n   * @param  {ProgressButtonModel} options?\n   * @param  {string|HTMLButtonElement} element?\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.step = 1;\n  }\n\n  preRender() {\n    super.preRender();\n  }\n  /**\n   * Initialize the Component rendering\n   * @returns void\n   * @private\n   */\n\n\n  render() {\n    if (isBlazor()) {\n      this.isServerRendered = false;\n    }\n\n    super.render();\n    this.init();\n    this.wireEvents();\n    this.setAria();\n    this.renderComplete();\n  }\n  /**\n   * Starts the button progress at the specified percent.\n   * @param percent Starts the button progress at this percent.\n   * @returns void\n   */\n\n\n  start(percent) {\n    this.isPaused = false;\n    this.startProgress(percent ? percent : this.percent, this.progressTime);\n  }\n  /**\n   * Stops the button progress.\n   * @returns void\n   */\n\n\n  stop() {\n    this.isPaused = true;\n    cancelAnimationFrame(this.timerId);\n  }\n  /**\n   * Complete the button progress.\n   * @returns void\n   */\n\n\n  progressComplete() {\n    this.isPaused = false;\n    this.finishProgress();\n  }\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'progress-btn';\n  }\n  /**\n   * Destroys the widget.\n   * @returns void\n   */\n\n\n  destroy() {\n    let classList$$1 = [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + super.getModuleName(), 'e-spin-' + this.spinSettings.position.toLowerCase()];\n    let css;\n    super.destroy();\n    this.unWireEvents();\n    this.element.innerHTML = '';\n\n    if (this.cssClass) {\n      classList$$1 = classList$$1.concat(this.cssClass.split(' '));\n    }\n\n    removeClass([this.element], classList$$1);\n    css = this.element.getAttribute('class') ? ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow'] : ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'class'];\n    css.forEach(key => {\n      this.element.removeAttribute(key);\n    });\n\n    if (this.disabled) {\n      this.element.removeAttribute('disabled');\n    }\n  }\n\n  init() {\n    this.element.classList.add('e-' + super.getModuleName());\n    this.setContent();\n    this.createSpinner();\n\n    if (this.enableProgress) {\n      this.createProgress();\n    }\n  }\n\n  createSpinner() {\n    let spinner = this.createElement('span', {\n      className: 'e-spinner'\n    });\n    this.setSpinPosition(spinner);\n    createSpinner({\n      target: spinner,\n      width: this.spinSettings.width || 16,\n      template: this.spinSettings.template\n    }, this.createElement);\n  }\n\n  getSpinner() {\n    return this.element.getElementsByClassName('e-spinner')[0];\n  }\n\n  getProgress() {\n    return this.element.getElementsByClassName(PROGRESS)[0];\n  }\n\n  setSpinPosition(ele) {\n    let position = this.spinSettings.position || 'Left';\n\n    if (position === 'Left' || position === 'Top') {\n      this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);\n    } else {\n      this.element.appendChild(ele);\n    }\n\n    this.element.classList.add('e-spin-' + position.toLowerCase());\n  }\n\n  createProgress() {\n    this.element.appendChild(this.createElement('span', {\n      className: PROGRESS\n    }));\n  }\n\n  setContent() {\n    let cont;\n\n    if (isBlazor()) {\n      cont = this.content;\n\n      if (this.enableHtmlSanitizer) {\n        cont = SanitizeHtmlHelper.sanitize(this.content);\n      }\n\n      this.setContentIcon(cont);\n    } else {\n      cont = this.element.innerHTML;\n\n      if (this.enableHtmlSanitizer) {\n        cont = SanitizeHtmlHelper.sanitize(this.element.innerHTML);\n      }\n\n      this.element.innerHTML = '';\n      this.element.appendChild(this.createElement('span', {\n        className: CONTENTCLS,\n        innerHTML: cont\n      }));\n    }\n  }\n\n  setContentIcon(content) {\n    let contElem = this.createElement('span', {\n      className: CONTENTCLS,\n      innerHTML: content\n    });\n\n    if (this.iconCss) {\n      let span = this.createElement('span', {\n        className: 'e-btn-icon ' + this.iconCss\n      });\n\n      if (!this.element.textContent.trim()) {\n        this.element.classList.add('e-icon-btn');\n      } else {\n        span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n\n        if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n          this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n        }\n      }\n\n      let node = contElem.childNodes[0];\n\n      if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n        contElem.insertBefore(span, node);\n      } else {\n        contElem.appendChild(span);\n      }\n    }\n\n    this.element.appendChild(contElem);\n  }\n\n  clickHandler() {\n    if (this.element.classList.contains(PROGRESSACTIVE)) {\n      return;\n    }\n\n    this.startProgress();\n  }\n\n  startProgress(percent, progressTime) {\n    let clsList = this.element.classList;\n    let isVertical = clsList.contains('e-vertical');\n    clsList.add(PROGRESSACTIVE);\n\n    if (!clsList.contains(HIDESPINNER)) {\n      showSpinner(this.element);\n    }\n\n    this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);\n    this.startContAnimate();\n  }\n\n  startAnimate(timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {\n    try {\n      let args;\n      let timeDiff = timestamp - prevTime;\n      let stepTime = this.duration * step / 100;\n      let timeDiffBuffer = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;\n      this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer;\n      prevTime = timestamp - timeDiffBuffer;\n      percent = percent + (timeDiff - timeDiffBuffer) / this.duration * 100;\n      prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;\n      args = {\n        percent: prevPercent,\n        currentDuration: progressTime,\n        step: step\n      };\n      this.eIsVertical = isVertical;\n\n      if (percent === 0) {\n        this.trigger('begin', args, observedArgs => {\n          this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);\n        });\n      } else if (percent === 100 || progressTime === this.duration) {\n        this.trigger('end', args, observedArgs => {\n          this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);\n        });\n      } else {\n        this.trigger('progress', args, observedArgs => {\n          this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);\n        });\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.timerId);\n      this.trigger('fail', e);\n    }\n  }\n\n  successCallback(args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {\n    let percent = perc;\n    let prevPercent = pPerc;\n    let timeDiffBuffer = timDif;\n    let progressTime = prgTim;\n    let prevProgressTime = pPrgTim;\n    let prevTime = pTim;\n    let isVertical = this.eIsVertical;\n\n    if (percent !== args.percent && args.percent !== prevPercent) {\n      percent = args.percent;\n    }\n\n    this.percent = percent;\n    this.step = args.step;\n\n    if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {\n      this.timerId = requestAnimationFrame(() => {\n        if (this.enableProgress) {\n          this.getProgress().style[isVertical ? 'height' : 'width'] = percent + '%';\n        }\n\n        this.element.setAttribute('aria-valuenow', percent.toString());\n      });\n      prevPercent = percent;\n      prevProgressTime = progressTime;\n    }\n\n    if (!this.isPaused) {\n      if (progressTime < this.duration && percent < 100) {\n        this.interval = window.setTimeout(() => {\n          this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical); // tslint:disable-next-line\n        }, this.duration / 100 - timeDiffBuffer);\n      } else {\n        this.interval = window.setTimeout(() => {\n          this.progressTime = this.percent = 0;\n\n          if (this.enableProgress) {\n            this.getProgress().style[isVertical ? 'height' : 'width'] = '0%';\n          }\n\n          this.element.setAttribute('aria-valuenow', '0');\n          this.hideSpin(); // tslint:disable-next-line\n        }, 100);\n      }\n    }\n  }\n\n  startContAnimate() {\n    let ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n\n    if (this.animationSettings.effect !== 'None') {\n      new Animation({}).animate(ele, {\n        duration: this.animationSettings.duration,\n        name: 'Progress' + this.animationSettings.effect,\n        timingFunction: this.animationSettings.easing,\n        begin: () => {\n          if (this.spinSettings.position === 'Center') {\n            this.setSpinnerSize();\n          }\n        },\n        end: () => {\n          ele.classList.add('e-animate-end');\n        }\n      });\n    } else if (this.spinSettings.position === 'Center') {\n      this.setSpinnerSize();\n    }\n  }\n\n  finishProgress() {\n    let clsList = this.element.classList;\n    let isVertical = clsList.contains('e-vertical');\n    clsList.add(PROGRESSACTIVE);\n    let args;\n    let count = 100;\n\n    for (let i = this.percent; i < count; i++) {\n      i += 10;\n\n      if (i > 100) {\n        i = 100;\n      }\n\n      if (this.enableProgress) {\n        this.getProgress().style[isVertical ? 'height' : 'width'] = this.percent < 100 ? i + '%' : '100%';\n      }\n    }\n\n    this.element.setAttribute('aria-valuenow', '0');\n    this.hideSpin();\n    args = {\n      step: this.step,\n      currentDuration: this.progressTime,\n      percent: 100\n    };\n    clearTimeout(this.interval);\n    this.trigger('end', args);\n    this.progressTime = this.percent = 0;\n  }\n\n  setSpinnerSize() {\n    let ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n    let spinner = this.getSpinner();\n    spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';\n    spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';\n    ele.classList.add('e-cont-animate');\n  }\n\n  hideSpin() {\n    let cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n\n    if (!this.element.classList.contains(HIDESPINNER)) {\n      hideSpinner(this.element);\n    }\n\n    this.element.classList.remove(PROGRESSACTIVE);\n\n    if (this.animationSettings.effect !== 'None') {\n      cont.classList.remove('e-animate-end');\n    }\n\n    if (this.spinSettings.position === 'Center') {\n      let ele = this.getSpinner();\n      cont.classList.remove('e-cont-animate');\n      ele.style.width = 'auto';\n      ele.style.height = 'auto';\n    }\n  }\n\n  setIconSpan() {\n    let cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n    let iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];\n\n    if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n      cont.insertBefore(iconSpan, cont.childNodes[0]);\n    } else {\n      cont.appendChild(iconSpan);\n    }\n  }\n\n  setAria() {\n    attributes(this.element, {\n      'aria-label': this.element.textContent + ' progress',\n      'aria-valuemin': '0',\n      'aria-valuemax': '100',\n      'aria-valuenow': '0'\n    });\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n  }\n\n  unWireEvents() {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n  }\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {ProgressButtonModel} newProp\n   * @param  {ProgressButtonModel} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    let ele = this.element;\n    let isSpinning = false;\n    let clsList = this.element.querySelector('.e-spinner-pane').classList;\n\n    if (clsList.contains('e-spin-show')) {\n      isSpinning = true;\n    }\n\n    super.onPropertyChanged(newProp, oldProp);\n\n    for (let prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'content':\n          if (isBlazor()) {\n            let btnElem = this.element.querySelector('.e-btn-content');\n\n            if (this.iconCss) {\n              if (this.iconPosition === 'Left' || this.iconPosition === 'Top') {\n                btnElem.childNodes[1].textContent = this.content;\n              } else {\n                btnElem.childNodes[0].textContent = this.content;\n              }\n            } else {\n              btnElem.textContent = this.content;\n            }\n          } else {\n            this.setContent();\n            this.createSpinner();\n\n            if (isSpinning) {\n              showSpinner(this.element);\n              isSpinning = false;\n            }\n\n            if (this.enableProgress) {\n              this.createProgress();\n            }\n          }\n\n          ele.setAttribute('aria-label', ele.textContent + ' progress');\n          break;\n\n        case 'iconCss':\n          if (!oldProp.iconCss) {\n            this.setIconSpan();\n          }\n\n          break;\n\n        case 'iconPosition':\n          this.setIconSpan();\n          break;\n\n        case 'enableProgress':\n          if (newProp.enableProgress) {\n            this.createProgress();\n          } else {\n            remove(this.getProgress());\n          }\n\n          break;\n\n        case 'spinSettings':\n          if (newProp.spinSettings.position) {\n            ele.classList.remove('e-spin-' + oldProp.spinSettings.position.toLowerCase());\n            this.setSpinPosition(this.getSpinner());\n          }\n\n          if (newProp.spinSettings.template || newProp.spinSettings.width) {\n            ele.removeChild(this.getSpinner());\n            this.createSpinner();\n          }\n\n          break;\n      }\n    }\n  }\n  /**\n   * Sets the focus to ProgressButton\n   * its native method\n   * @public\n   */\n\n\n  focusIn() {\n    this.element.focus();\n  }\n\n};\n\n__decorate$3([Property(false)], ProgressButton.prototype, \"enableProgress\", void 0);\n\n__decorate$3([Property(2000)], ProgressButton.prototype, \"duration\", void 0);\n\n__decorate$3([Property('Left')], ProgressButton.prototype, \"iconPosition\", void 0);\n\n__decorate$3([Property('')], ProgressButton.prototype, \"iconCss\", void 0);\n\n__decorate$3([Property(false)], ProgressButton.prototype, \"disabled\", void 0);\n\n__decorate$3([Property(false)], ProgressButton.prototype, \"isPrimary\", void 0);\n\n__decorate$3([Property('')], ProgressButton.prototype, \"cssClass\", void 0);\n\n__decorate$3([Property('')], ProgressButton.prototype, \"content\", void 0);\n\n__decorate$3([Property(false)], ProgressButton.prototype, \"isToggle\", void 0);\n\n__decorate$3([Property(false)], ProgressButton.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$3([Complex({}, SpinSettings)], ProgressButton.prototype, \"spinSettings\", void 0);\n\n__decorate$3([Complex({}, AnimationSettings)], ProgressButton.prototype, \"animationSettings\", void 0);\n\n__decorate$3([Event()], ProgressButton.prototype, \"created\", void 0);\n\n__decorate$3([Event()], ProgressButton.prototype, \"begin\", void 0);\n\n__decorate$3([Event()], ProgressButton.prototype, \"progress\", void 0);\n\n__decorate$3([Event()], ProgressButton.prototype, \"end\", void 0);\n\n__decorate$3([Event()], ProgressButton.prototype, \"fail\", void 0);\n\nProgressButton = __decorate$3([NotifyPropertyChanges], ProgressButton);\n/**\n * ProgressButton modules\n */\n\n/**\n * SplitButton all module\n */\n\nexport { getModel, upDownKeyHandler, setBlankIconStyle, Item, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton }; //# sourceMappingURL=ej2-splitbuttons.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}